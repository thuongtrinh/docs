ssl:
	key-store: classpath:server.jks
	key-store-password: password
	key-password: password

KeyStoreKeyFactory keyStoreKeyFactory = new KeyStoreKeyFactory(new ClassPathResource("jwt.jks"), "mySecretKey".toCharArray());
JwtAccessTokenConverter converter = new JwtAccessTokenConverter();
converter.setKeyPair(keyStoreKeyFactory.getKeyPair("jwt"));

=========================================================================================================================
1. Import certificate local:

keytool -delete -alias "test-certificate" -keystore "%JAVA_HOME\jre\lib\security\cacerts" storepass changeit

keytool -import -noprompt -trustcacerts -alias "test-certificate" -file "C:\Users\admin\Downloads\test.cer" -keystore "%JAVA_HOME\jre\lib/security/cacerts" storepass changeit

=========================================================================================================================
2. Creating the Java KeyStore and convert-to-pem-format:

keytool -genkey -keyalg RSA -v -keystore keystore.jks -alias first-key-pair
keytool -exportcert -alias first-key-pair -keystore keystore.jks -rfc -file first-key-pair-cert.pem
========================================================
keytool -genkey -keyalg RSA -v -keystore syspro.jks -alias syspro-pair
keytool -exportcert -alias syspro-pair -keystore syspro.jks -rfc -file syspro-cert.pem
  
=========================================================================================================================

3. JKS to PKCS#12:

keytool -importkeystore -srckeystore keystore.jks -destkeystore keystore.p12 -srcstoretype jks -deststoretype pkcs12
keytool -list -keystore C:\Program Files\Java\jdk-17.0.1\lib\security
keytool -import -trustcacerts -alias [alias] -file [certificate-file] -keystore $JAVA_HOME/lib/security/cacerts

** PKCS#12 to JKS:

keytool -importkeystore -srckeystore certificate.p12 -srcstoretype pkcs12 -destkeystore cert.jks

=========================================================================================================================
4. Listing Certificates in the Keystore
keytool -list -storepass <storepass> 

=========================================================================================================================
Digital Signatures in Java

5. KeyPair Management
5.1 Private Key (Getting a KeyPair)

keytool -genkeypair -alias senderKeyPair -keyalg RSA -keysize 2048 -dname "CN=Baeldung" -validity 365 -storetype JKS -keystore sender_keystore.jks -storepass changeit

==============================
5.2 Public Key 
a. When using a self-signed certificate, we need only to export it from the Keystore file:

keytool -exportcert -alias senderKeyPair -storetype JKS -keystore sender_keystore.jks -file sender_certificate.cer -rfc -storepass changeit

b. If we're going to work with a CA-signed certificate, then we need to create a certificate signing request (CSR)

keytool -certreq -alias senderKeyPair -storetype JKS -keystore sender_keystore.jks -file -rfc -storepass changeit > sender_certificate.csr
 
*Note: The public key we received from the CA, sender_certificate.cer, has now been signed by a CA and can be made available for clients.

==============================
5.3. Loading a Public Key for Verification
a. Let's create an empty Keystore:

keytool -genkeypair -alias receiverKeyPair -keyalg RSA -keysize 2048 -dname "CN=Baeldung" -validity 365 -storetype JKS -keystore receiver_keystore.jks -storepass changeit 
 
keytool -delete -alias receiverKeyPair -storepass changeit -keystore receiver_keystore.jks 

b. Having access to the public key, a receiver can load it into their Keystore using the importcert command:

keytool -importcert -alias receiverKeyPair -storetype JKS -keystore receiver_keystore.jks -file sender_certificate.cer -rfc -storepass changeit

============================================================
Example: Gen public/private
sender_keystore : private key
sender_certificate.cer : To create public key received from the CA
receiver_keystore : public key

keytool -genkeypair -alias senderKeyPair -keyalg RSA -keysize 2048 -dname "CN=Syspro" -validity 365 -storetype JKS -keystore sender_keystore.jks -storepass changeit
keytool -exportcert -alias senderKeyPair -storetype JKS -keystore sender_keystore.jks -file sender_certificate.cer -rfc -storepass changeit
keytool -importcert -alias receiverKeyPair -storetype JKS -keystore receiver_keystore.jks -file sender_certificate.cer -rfc -storepass changeit

=========================================================================================================================
1. RSA Key Pair Generation TEST_COM

b1: keytool -genkeypair -keysize 2048 -keyalg RSA -alias apibking-sig-key -keystore cb-api-bking.jks

b2: The jks file is created as below from the above step
	ls -ltr

b3: keytool -list -keystore cb-api-bking.jks -storepass 123456

b4: keytool -exportcert -keystore cb-api-bking.jks -alias apibking-sig-key -rfc -file certificate.pem

b5: openssl x509 -pubkey -noout -in certificate.pem > pubkey.pem    -> This key (pubkey.pem) needs to be sent to bk.

2. Certificate Signing Request Generation (CSR)

b6: openssl genrsa -out ./cb-apibking-client-cert-private-key.pem 2048

b7: openssl req -new -sha256 -key cb-apibking-client-cert-private-key.pem -out ./cb-apibking-client-cert-csr.pem


--------the bk in-turn sends 2 files: activation-key.json / client.cer This must be imported under the Java key store------------

2) client.cer â€“ This file is the signed Certificate provided by Standard Chartered. This must be imported under the Java key store as below

openssl pkcs12 -export -in client.cer -inkey cb-apibking-client-cert-private-key.pem -out cb-apibking.keystore.p12 -name 1

keytool-importkeystore -deststorepass 123456 -destkeypass 123456 -destkeystore cb-api-bking.jks -srckeystore cb-apibking.keystore.p12 -srcstoretype PKCS12 -srcstore -pass 123456 -alias 1

keytool -list -keystore cb-api-bking.jks -storepass 123456


=========================================================================================================================

keytool -genkeypair -alias mytest 
                    -keyalg RSA 
                    -keypass mypass 
                    -keystore mytest.jks 
                    -storepass mypass

====================================================
Export Public Key: 
keytool -list -rfc --keystore mytest.jks | openssl x509 -inform pem -pubkey

=========================================================================================================================

keytool -genkeypair -alias mytest  -keyalg RSA   -keypass mypass   -keystore mytest.jks  -storepass mypass
